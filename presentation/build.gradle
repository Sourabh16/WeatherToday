apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.fernandocejas.frodo'

android {
  def globalConfiguration = rootProject.extensions.getByName("ext")

  compileSdkVersion globalConfiguration.getAt("androidCompileSdkVersion")
  buildToolsVersion globalConfiguration.getAt("androidBuildToolsVersion")

  defaultConfig {
    applicationId globalConfiguration.getAt("androidApplicationId")
    minSdkVersion globalConfiguration.getAt("androidMinSdkVersion")
    targetSdkVersion globalConfiguration.getAt("androidTargetSdkVersion")
    versionCode globalConfiguration.getAt("androidVersionCode")
    versionName globalConfiguration.getAt("androidVersionName")
    testInstrumentationRunner globalConfiguration.getAt("testInstrumentationRunner")
    testApplicationId globalConfiguration.getAt("testApplicationId")
  }

  packagingOptions {
    exclude 'LICENSE.txt'
    exclude 'META-INF/DEPENDENCIES'
    exclude 'META-INF/ASL2.0'
    exclude 'META-INF/NOTICE'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/rxjava.properties'
  }

  signingConfigs {
    debug {
      storeFile file('../buildsystem/debug.keystore')
      storePassword 'android'
      keyAlias 'androiddebugkey'
      keyPassword 'android'
    }
    release {
      storeFile file('../buildsystem/debug.keystore')
      storePassword 'android'
      keyAlias 'androiddebugkey'
      keyPassword 'android'
    }
  }

  buildTypes {
    debug {
      initWith(buildTypes.debug)
      debuggable true
      signingConfig signingConfigs.debug
    }
    release {
      initWith(buildTypes.release)
      minifyEnabled false
      debuggable false
      signingConfig signingConfigs.release
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      applicationVariants.all { variant ->
        variant.outputs.each { output ->
          output.outputFile = new File(output.outputFile.parent,
              output.outputFile.name.replace("prod-release.apk",
                  defaultConfig.versionName + ".apk"))
        }
      }
      frodo {
        enabled = false
      }
    }
  }

  buildTypes.each { buildType ->
    buildType.buildConfigField 'String', 'ENV',
        "\"" + (buildType.name == 'debug' ? 'debug' : buildType.name) + "\""
  }

  lintOptions {
    quiet true
    abortOnError false
    ignoreWarnings true
    disable 'InvalidPackage'
    disable 'OldTargetApi'
    disable 'IconDensities'
    disable 'IconMissingDensityFolder'
  }

  dexOptions {
    preDexLibraries = false
  }

  sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
  }
}

kapt {
  generateStubs = true
}

dependencies {
  def presentationDependencies = rootProject.ext.presentationDependencies
  def presentationTestDependencies = rootProject.ext.presentationTestDependencies

  compile presentationDependencies.kotlin
  compile presentationDependencies.anko

  compile project(':domain')
  debugCompile project(path: ':data', configuration: 'debug')
  releaseCompile project(path: ':data', configuration: 'release')

  compile presentationDependencies.appcompat
  compile presentationDependencies.supportV13
  compile presentationDependencies.design
  compile presentationDependencies.recyclerView

  compile presentationDependencies.rxJava
  compile presentationDependencies.rxAndroid
  compile presentationDependencies.rxKotlin

  kapt presentationDependencies.daggerCompiler
  compile presentationDependencies.dagger

  compile presentationDependencies.picasso

  provided presentationDependencies.javaxAnnotation

  testCompile presentationDependencies.jUnit
  androidTestCompile presentationTestDependencies.mockito
  androidTestCompile presentationTestDependencies.dexmaker
  androidTestCompile presentationTestDependencies.dexmakerMockito
  androidTestCompile presentationTestDependencies.espresso
  androidTestCompile presentationTestDependencies.testingSupportLib
}

repositories {
  mavenCentral()
}